/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** Type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/products": {
    /** Retrieve products */
    get: operations["getProducts"];
    /** Add a new product */
    post: operations["addProduct"];
  };
  "/products/{productId}": {
    /** Get a product */
    get: operations["getProductById"];
    /** Delete a product */
    delete: operations["delateProduct"];
    /** Update a product */
    patch: operations["updateProduct"];
    
  };
  "/brands": {
    /** Retrieve brands */
    get: operations["getBrands"];
    /** Add a new brand */
    post: operations["addBrand"];
  };
  "/brands/{brandId}": {
    /** Get a brand */
    get: operations["getBrandById"];
    /** Delete a brand */
    delete: operations["deleteBrand"];
    /** Update a brand */
    patch: operations["updateBrand"];
    
  };
  "/categories": {
    /** Retrieve categories */
    get: operations["getCategories"];
    /** Add a new category */
    post: operations["addCategory"];
  };
  "/categories/{categoryId}": {
    /** Get a category */
    get: operations["getCategoryById"];
    /** Delete a category */
    delete: operations["deleteCategory"];
    /** Update a category */
    patch: operations["updateCategory"];
    parameters: {
        /** @description Id of category */
      path: {
        categoryId: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Product: {
      id: string;
      name: string;
      description?: string;
      category: {
        id: string;
        name: string;
        description?: string;
      };
      brand: {
        id: string;
        name: string;
        description?: string;
      };
      quantity: number;
      price: number;
      /** Format: date-time */
      date: string;
      /** Format: uri */
      url: string;
    };
    Brand: {
      id: string;
      name: string;
      description?: string;
      /** Format: uri */
      url: string;
    };
    Category: {
      id: string;
      name: string;
      description?: string;
      /** Format: uri */
      url: string;
    };
  };
  responses: {
    /** @description Example response */
    Products: {
      content: {
        "application/json": {
          items?: (components["schemas"]["Product"])[];
          count?: number;
        };
      };
    };
    /** @description Example response */
    Product: {
      content: {
        "application/json": components["schemas"]["Product"];
      };
    };
    /** @description Example response */
    Brands: {
      content: {
        "application/json": {
          items?: (components["schemas"]["Brand"])[];
          count?: number;
        };
      };
    };
    /** @description Example response */
    Brand: {
      content: {
        "application/json": components["schemas"]["Brand"];
      };
    };
    /** @description Example response */
    Categories: {
      content: {
        "application/json": {
          items?: (components["schemas"]["Category"])[];
          count?: number;
        };
      };
    };
    /** @description Example response */
    Category: {
      content: {
        "application/json": components["schemas"]["Category"];
      };
    };
    /** @description Example response */
    StandardResponse: {
      content: {
        "application/json": {
          code: string;
          message: OneOf<[string, Record<string, never>]>;
        };
      };
    };
    /** @description Example response */
    EntityDeleted: {
      content: {
        "application/json": {
          code: string;
          id: string;
          entity: string;
        };
      };
    };
  };
  parameters: {
    /** @description Id of product */
    productId: string;
    /** @description Name of product */
    productName: string;
    /** @description Description of product */
    productDescription: string;
    /** @description Category id of product */
    productCategory: string;
    /** @description Brand id of products */
    productBrand: string;
    /** @description Minimum quantity of products */
    productMinQuantity: number;
    /** @description Maximum quantity of products */
    productMaxQuantity: number;
    /** @description Minimum price of products */
    productMinPrice: number;
    /** @description Maximum price of products */
    productMaxPrice: number;
    /** @description Minimum date of products data modifications */
    productMinDate: string;
    /** @description Maximum date of products data modifications */
    productMaxDate: string;
    /** @description Id of brand */
    brandId: string;
    /** @description Name of brands */
    brandName: string;
    /** @description Description of brands */
    brandDescription: string;
    /** @description Id of category */
    categoryId: string;
    /** @description Name of categories */
    categoryName: string;
    /** @description Description of category */
    categoryDescription: string;
  };
  requestBodies: {
    AddProduct?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Name of product */
          name: string;
          /** @description Description of product */
          description?: string;
          /** @description Category id of product */
          category: string;
          /** @description Brand id of product */
          brand: string;
          /** @description Quantity of product */
          quantity: number;
          /** @description Price of product */
          price: number;
        };
      };
    };
    UpdateProduct?: {
      content: {
        "application/x-www-form-urlencoded": {
          name?: string;
          description?: string;
          category?: string;
          brand?: string;
          quantity?: number;
          price?: number;
        };
      };
    };
    AddBrand?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Name of category */
          name: string;
          /** @description Description of category */
          description?: string;
        };
      };
    };
    UpdateBrand?: {
      content: {
        "application/x-www-form-urlencoded": {
          name?: string;
          description?: string;
        };
      };
    };
    AddCategory?: {
      content: {
        "application/x-www-form-urlencoded": {
          /** @description Name of category */
          name: string;
          /** @description Description of category */
          description?: string;
        };
      };
    };
    UpdateCategory?: {
      content: {
        "application/x-www-form-urlencoded": {
          name?: string;
          description?: string;
        };
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  getProducts: {
    /** Retrieve products */
    responses: {
      200: components["responses"]["Products"];
      500: components["responses"]["StandardResponse"];
    };
  };
  addProduct: {
    /** Add a new product */
    requestBody: components["requestBodies"]["AddProduct"];
    responses: {
      201: components["responses"]["Product"];
      400: components["responses"]["StandardResponse"];
      404: components["responses"]["StandardResponse"];
      500: components["responses"]["StandardResponse"];
    };
  };
  getProductById: {
    /** Get a product */
    responses: {
      200: components["responses"]["Product"];
      400: components["responses"]["StandardResponse"];
      404: components["responses"]["StandardResponse"];
      500: components["responses"]["StandardResponse"];
    };
  };
  delateProduct: {
    /** Delete a product */
    responses: {
      200: components["responses"]["EntityDeleted"];
      400: components["responses"]["StandardResponse"];
      404: components["responses"]["StandardResponse"];
      500: components["responses"]["StandardResponse"];
    };
  };
  updateProduct: {
    /** Update a product */
    requestBody: components["requestBodies"]["UpdateProduct"];
    responses: {
      200: components["responses"]["Product"];
      400: components["responses"]["StandardResponse"];
      404: components["responses"]["StandardResponse"];
      500: components["responses"]["StandardResponse"];
    };
  };
  getBrands: {
    /** Retrieve brands */
    responses: {
      200: components["responses"]["Brands"];
      500: components["responses"]["StandardResponse"];
    };
  };
  addBrand: {
    /** Add a new brand */
    requestBody: components["requestBodies"]["AddBrand"];
    responses: {
      201: components["responses"]["Brand"];
      400: components["responses"]["StandardResponse"];
      404: components["responses"]["StandardResponse"];
      500: components["responses"]["StandardResponse"];
    };
  };
  getBrandById: {
    /** Get a brand */
    responses: {
      200: components["responses"]["Brand"];
      400: components["responses"]["StandardResponse"];
      404: components["responses"]["StandardResponse"];
      500: components["responses"]["StandardResponse"];
    };
  };
  deleteBrand: {
    /** Delete a brand */
    responses: {
      200: components["responses"]["EntityDeleted"];
      400: components["responses"]["StandardResponse"];
      404: components["responses"]["StandardResponse"];
      500: components["responses"]["StandardResponse"];
    };
  };
  updateBrand: {
    /** Update a brand */
    requestBody: components["requestBodies"]["UpdateBrand"];
    responses: {
      200: components["responses"]["Brand"];
      400: components["responses"]["StandardResponse"];
      404: components["responses"]["StandardResponse"];
      500: components["responses"]["StandardResponse"];
    };
  };
  getCategories: {
    /** Retrieve categories */
    responses: {
      200: components["responses"]["Categories"];
      500: components["responses"]["StandardResponse"];
    };
  };
  addCategory: {
    /** Add a new category */
    requestBody: components["requestBodies"]["AddCategory"];
    responses: {
      201: components["responses"]["Category"];
      400: components["responses"]["StandardResponse"];
      404: components["responses"]["StandardResponse"];
      500: components["responses"]["StandardResponse"];
    };
  };
  getCategoryById: {
    /** Get a category */
    responses: {
      200: components["responses"]["Category"];
      400: components["responses"]["StandardResponse"];
      404: components["responses"]["StandardResponse"];
      500: components["responses"]["StandardResponse"];
    };
  };
  deleteCategory: {
    /** Delete a category */
    responses: {
      200: components["responses"]["EntityDeleted"];
      400: components["responses"]["StandardResponse"];
      404: components["responses"]["StandardResponse"];
      500: components["responses"]["StandardResponse"];
    };
  };
  updateCategory: {
    /** Update a category */
    requestBody: components["requestBodies"]["UpdateCategory"];
    responses: {
      200: components["responses"]["Category"];
      400: components["responses"]["StandardResponse"];
      404: components["responses"]["StandardResponse"];
      500: components["responses"]["StandardResponse"];
    };
  };
}
